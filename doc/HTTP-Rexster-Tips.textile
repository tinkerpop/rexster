HTTP Rexster Tips (in Python)

You'll need to http encode some of the special characters.


bc.
 def cleanurl(url):
    return  url.replace("(", "%28").replace("'","%27").replace(")","%29").replace("{","%7B").replace("}","%7D").replace(" ", "%20").replace("#","%23")

bc.
 def queryrex():
    fullurl = cleanurl("http://" + rexhost + ":" + port + "/graphs")
    return urllib2.urlopen(fullurl).read()

bc.
 def gremlinquery(gremlinscript):
    fullurl = cleanurl("http://" + rexhost + ":" + port + "/graphs/mygraph/tp/gremlin?script=" + gremlinscript )
    return json.loads(urllib2.urlopen(fullurl).read())['results']

bc.
 def getneighbors(myid, label, inout):
    return gremlinquery("g.V('myid','" + str(myid) + "')." + inout + "('" + label + "').sort{it.myid}.unique()")

bc.
 def addvector(values):
    existingrecord = gremlinquery("g.V('myid','" + values.get('myid') + "')")
    if not existingrecord:
        values['ts'] = '0123'
        data = urllib.urlencode(values)
        fullurl = cleanurl("http://" + rexhost + ":" + port + "/graphs/mygraph/vertices/?" + data)
        req = urllib2.Request(fullurl, data)
        return urllib2.urlopen(req).read()

bc.
 def deletevertex(vertexid):
    opener = urllib2.build_opener(urllib2.HTTPHandler)
    fullurl = cleanurl("http://" + rexhost + ":" + port + "/graphs/dmlgraph/vertices/" + str(vertexid))
    request = urllib2.Request(fullurl)
    request.get_method = lambda: 'DELETE'
    url = opener.open(request)
    print("deleted: " + str(url))

